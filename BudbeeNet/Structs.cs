// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Budbee;
//
//    var order = Order.FromJson(jsonString);

namespace BudbeeNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;


    public partial class OrderDriver
    {
        [JsonProperty("accuracy", NullValueHandling = NullValueHandling.Ignore)]
        public long? Accuracy { get; set; }

        [JsonProperty("heading", NullValueHandling = NullValueHandling.Ignore)]
        public long? Heading { get; set; }

        [JsonProperty("speed", NullValueHandling = NullValueHandling.Ignore)]
        public long? Speed { get; set; }

        [JsonProperty("coordinate", NullValueHandling = NullValueHandling.Ignore)]
        public DriverCoordinates Coordinate { get; set; }

        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Date { get; set; }
    }

    public partial class DriverCoordinates
    {
        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }
    }

    public partial class OrderBanner
    {
        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("payload", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("errorCode", NullValueHandling = NullValueHandling.Ignore)]
        public string ErrorCode { get; set; }

        [JsonProperty("errorMsg", NullValueHandling = NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    }
    public partial class OrderType
    {
        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Order
    {
        [JsonProperty("createdAt", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("token", NullValueHandling = NullValueHandling.Ignore)]
        public string Token { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public Status Status { get; set; }

        [JsonProperty("parcelSummary", NullValueHandling = NullValueHandling.Ignore)]
        public ParcelSummary ParcelSummary { get; set; }

        [JsonProperty("rating")]
        public object Rating { get; set; }

        [JsonProperty("consumer", NullValueHandling = NullValueHandling.Ignore)]
        public Consumer Consumer { get; set; }

        [JsonProperty("merchant", NullValueHandling = NullValueHandling.Ignore)]
        public Merchant Merchant { get; set; }

        [JsonProperty("deliveryAddress", NullValueHandling = NullValueHandling.Ignore)]
        public DeliveryAddress DeliveryAddress { get; set; }

        [JsonProperty("deliveryWindow", NullValueHandling = NullValueHandling.Ignore)]
        public DeliveryWindow DeliveryWindow { get; set; }

        [JsonProperty("settings", NullValueHandling = NullValueHandling.Ignore)]
        public OrderSettings Settings { get; set; }

        [JsonProperty("driver", NullValueHandling = NullValueHandling.Ignore)]
        public Driver Driver { get; set; }

        [JsonProperty("events", NullValueHandling = NullValueHandling.Ignore)]
        public List<Event> Events { get; set; }

        [JsonProperty("eta", NullValueHandling = NullValueHandling.Ignore)]
        public Eta Eta { get; set; }
    }

    public partial class Consumer
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("phoneNumber", NullValueHandling = NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }
    }

    public partial class DeliveryAddress
    {
        [JsonProperty("street", NullValueHandling = NullValueHandling.Ignore)]
        public string Street { get; set; }

        [JsonProperty("street2", NullValueHandling = NullValueHandling.Ignore)]
        public string Street2 { get; set; }

        [JsonProperty("postalCode", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? PostalCode { get; set; }

        [JsonProperty("city", NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("countryCode", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        [JsonProperty("settings", NullValueHandling = NullValueHandling.Ignore)]
        public DeliveryAddressSettings Settings { get; set; }

        [JsonProperty("coordinate", NullValueHandling = NullValueHandling.Ignore)]
        public Coordinate Coordinate { get; set; }
    }

    public partial class Coordinate
    {
        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }
    }

    public partial class DeliveryAddressSettings
    {
        [JsonProperty("hasDoorCode")]
        public object HasDoorCode { get; set; }

        [JsonProperty("doorCode", NullValueHandling = NullValueHandling.Ignore)]
        public string DoorCode { get; set; }

        [JsonProperty("floor", NullValueHandling = NullValueHandling.Ignore)]
        public long? Floor { get; set; }

        [JsonProperty("estateType", NullValueHandling = NullValueHandling.Ignore)]
        public string EstateType { get; set; }

        [JsonProperty("houseLetter")]
        public object HouseLetter { get; set; }

        [JsonProperty("specialInstructions")]
        public object SpecialInstructions { get; set; }
    }

    public partial class DeliveryWindow
    {
        [JsonProperty("start", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Start { get; set; }

        [JsonProperty("stop", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Stop { get; set; }

        [JsonProperty("deadline", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Deadline { get; set; }

        [JsonProperty("return", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Return { get; set; }
    }

    public partial class Driver
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Icon { get; set; }
    }

    public partial class Eta
    {
        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Date { get; set; }

        [JsonProperty("remainingStopCount", NullValueHandling = NullValueHandling.Ignore)]
        public long? RemainingStopCount { get; set; }
    }

    public partial class Event
    {
        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Date { get; set; }

        [JsonProperty("sender", NullValueHandling = NullValueHandling.Ignore)]
        public string Sender { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Icon { get; set; }

        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }
    }

    public partial class Merchant
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("logo", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Logo { get; set; }

        [JsonProperty("supportEmail", NullValueHandling = NullValueHandling.Ignore)]
        public string SupportEmail { get; set; }

        [JsonProperty("supportPhone", NullValueHandling = NullValueHandling.Ignore)]
        public string SupportPhone { get; set; }
    }

    public partial class ParcelSummary
    {
        [JsonProperty("toBeDelivered", NullValueHandling = NullValueHandling.Ignore)]
        public long? ToBeDelivered { get; set; }

        [JsonProperty("enRoute", NullValueHandling = NullValueHandling.Ignore)]
        public long? EnRoute { get; set; }

        [JsonProperty("delivered", NullValueHandling = NullValueHandling.Ignore)]
        public long? Delivered { get; set; }

        [JsonProperty("returnable", NullValueHandling = NullValueHandling.Ignore)]
        public long? Returnable { get; set; }
    }

    public partial class OrderSettings
    {
        [JsonProperty("outsideDoorOk", NullValueHandling = NullValueHandling.Ignore)]
        public bool? OutsideDoorOk { get; set; }

        [JsonProperty("allowConsumerToEditOutsideDoor", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowConsumerToEditOutsideDoor { get; set; }

        [JsonProperty("knockOnDoor", NullValueHandling = NullValueHandling.Ignore)]
        public bool? KnockOnDoor { get; set; }

        [JsonProperty("leaveWithNeighbour", NullValueHandling = NullValueHandling.Ignore)]
        public bool? LeaveWithNeighbour { get; set; }

        [JsonProperty("alternativelyLeaveWithNeighbour", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AlternativelyLeaveWithNeighbour { get; set; }

        [JsonProperty("signatureRequired", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SignatureRequired { get; set; }

        [JsonProperty("identificationCheckRequired", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IdentificationCheckRequired { get; set; }

        [JsonProperty("recipientMinimumAge", NullValueHandling = NullValueHandling.Ignore)]
        public long? RecipientMinimumAge { get; set; }

        [JsonProperty("recipientMustMatchEndCustomer", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RecipientMustMatchEndCustomer { get; set; }
    }

    public partial class Status
    {
        [JsonProperty("outsideDoor", NullValueHandling = NullValueHandling.Ignore)]
        public bool? OutsideDoor { get; set; }

        [JsonProperty("withNeighbour", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WithNeighbour { get; set; }

        [JsonProperty("neighbourName")]
        public object NeighbourName { get; set; }

        [JsonProperty("neighbourAddress")]
        public object NeighbourAddress { get; set; }

        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Date { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string StatusStatus { get; set; }
    }
    public partial class OrderDriver
    {
        public static OrderDriver FromJson(string json) => JsonConvert.DeserializeObject<OrderDriver>(json, BudbeeNet.Converter.Settings);
    }

    public partial class OrderBanner
    {
        public static OrderBanner FromJson(string json) => JsonConvert.DeserializeObject<OrderBanner>(json, BudbeeNet.Converter.Settings);
    }

    public partial class OrderType
    {
        public static OrderType FromJson(string json) => JsonConvert.DeserializeObject<OrderType>(json, BudbeeNet.Converter.Settings);
    }

    public partial class Order
    {
        public static Order FromJson(string json) => JsonConvert.DeserializeObject<Order>(json, BudbeeNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Order self) => JsonConvert.SerializeObject(self, BudbeeNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
